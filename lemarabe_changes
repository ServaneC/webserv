*********************
    PARSING_UTILS.CPP
*********************

#include "../webserv.hpp"

size_t findClosingBracket(std::string str, size_t begin)
{
	size_t end = begin;
	size_t count = 1;
	
	if (str[end] == '{')
	{
		while (count) // str[begin] != '{' && str[begin] != '}')
		{
            end = str.find_first_of("{}", end);
			if (str[end] == '{')
				count++;
			else
				count--;
		}
	}
	return (end);
}

*********************
WEBSERV.HPP
*********************
size_t  findClosingBracket(std::string str, size_t begin);

*********************
    CONFIG.CPP
*********************

#include "include/Config.hpp"

# define BUFF_SIZE 1000

Config::Config() {}

Config::Config(std::string conf_file) : _servers()
{
	readConfFile(conf_file.c_str());
	createServers();
}

Config::~Config()
{
	this->_content.clear();
}

int 	Config::readConfFile(char const *path)
{
	std::fstream conf_stream(path, std::ios_base::in); //open file for reading
	char *line = NULL;
	
	if (!(line = (char *)malloc(sizeof(char) * BUFF_SIZE)))
		return -1;
	while (1)
	{
		conf_stream.getline(line, BUFF_SIZE);
		this->_content.append(line);
		this->_content.push_back('\n');
		memset(line, '\0', BUFF_SIZE);
		if (conf_stream.eof())
			break ;
	}
	std::cout << "===== CONF =====" << std::endl;
	std::cout << this->_content << std::endl;
	std::cout << "================" << std::endl;
	conf_stream.close();
	return 1;
}

std::string Config::singleServerConfig(size_t index)
{
	std::string singleServer;
	size_t open_bracket = _content.find_first_not_of("serv \t\n\r\v\f", index);
	size_t close_bracket = findClosingBracket(_content, open_bracket);
	
	if (open_bracket == '{' && close_bracket != std::string::npos)
		singleServer = _content.substr(open_bracket, close_bracket);
	return singleServer;
}

void	Config::createServers(void)
{
	size_t last_found = 0;
	
	while ((last_found = _content.find("server", last_found)) && last_found < _content.size() && last_found < std::string::npos)
	{
		std::string single_server_conf = singleServerConfig(last_found++);
		
		if (!single_server_conf.empty())
			std::cout << "HERE'S WHAT I JUST CREATED :: " << single_server_conf << "\nOK BYE" << std::endl;
			_servers.push_back(new Server(*this, single_server_conf));
	}
}
*********************
    CONFIG.HPP
*********************

#include "../../webserv.hpp"

class Config
{
	private:
		Config();
		std::string			_content;
		std::list<Server*>	_servers;
		std::string singleServerConfig(size_t index);

	public:
		Config(std::string conf_file);
		~Config();

		int 	readConfFile(char const *path);
		void	createServers(void);
};

#endif

*********************
    SERVER.HPP
*********************
class Server
{
	private:
		Request								&_rqst;
		Config								&_conf;
		std::string							_server_conf;
		// std::string							_buf;
		int									_port;
		std::string 						_name;
		int									_socket;
		struct sockaddr_in					_host;
		int									_client_socket;
		int									_addrlen;
		//std::map<std::string, std::string>	_routes;
		void	start_server();
			
	public:
		Server(Config &conf, std::string conf_file);
		~Server();

		int			getPort() const;
		std::string	getName() const;
		int			getFd() const;
		int			getSocket() const;
		Request		&getRequest() const;
};


*********************
    SERVER.CPP
*********************
#include "include/Server.hpp"

Server::Server(Config &conf, std::string server_conf) : _rqst(*(new Request)), _conf(conf), _server_conf(server_conf)
{
    // (void)conf_file;
    // this->_conf.parseConfFile(conf_file.c_str());
    this->_port = 8080;
    this->_name = "localhost";
    this->_host.sin_family = PF_INET;
    this->_host.sin_addr.s_addr = INADDR_ANY; // -> 0.0.0.0
    this->_host.sin_port = htons(this->_port);
    this->_addrlen = sizeof(this->_host);
    this->_socket = socket(PF_INET, SOCK_STREAM, 0);
    this->start_server();
}

*********************
    MAIN.CPP
*********************

#include "../webserv.hpp"

int main (int ac, char **av) //the conf file is the only possible argument 
{
	if (ac == 2) // use the given conf file
		// Server(std::string(av[1]));
		Config(std::string(av[1]));
	else if (ac == 1) // use a defautl conf file
		// Server("webserv.conf");
		Config("webserv.conf");
	else	// ERROR
	{
		// std::cout << "ERROR" << std::endl;
		return -1;
	}
	return 0;
}